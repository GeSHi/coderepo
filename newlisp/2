#!/usr/bin/env newlisp

;; @module markdown
;; @author cormullion
;; @description a port of John Gruber's Markdown to newLISP
;; @location http://unbalanced-parentheses.nfshost.com/markdown.lsp.txt
;; @version of date 2008-10-08 18:44:46
;; a port of John Gruber's Markdown.pl (http://daringfireball.net/markdown) script to newLISP...
;; see his original Perl script for explanations of the fearsome regexen and
;; byzantine logic, etc...
;;
;; TODO:
;; the following Markdown tests give different results:
;;  nested brackets (see Links, reference style.text)
;;  backticks in html tags (see test file Code Spans.text)
;;  parens in url : ![this is a stupid URL](http://example.com/(parens).jpg) see (Images.text)
;;  a nested ordered list error (see Ordered and unordered lists.text)
;;  some odd backslash escapes in Backslash escapes.text
;;  Add: email address scrambling
;;
;; version date 2008-10-08 18:44:46
;; changed nth-set to setf to be version-10 ready. 
;; This means that now this script will NOT work with
;; earlier versions of newLISP!!!!!!!!!!!
;; requires Nestor if you want source code colouring...
;;
;; version date 2008-08-08 16:54:56
;; changed (unless to (if (not ... :(
;;
;; version date 2008-07-20 14:!2:29
;; added hex-str-to-unicode-char ustring
;;
;; version date 2008-03-07 15:36:09
;; fixed load error
;;
;; version date 2007-11-17 16:20:57
;; added syntax colouring module
;; 
;; version date  2007-11-14 09:19:42
;; removed reliance on dostring for compatibility with 9.1
;; author: cormullion


; source code colouring?
; (load "nestor.lsp")

(context 'markdown)

;; @syntax (markdown:markdown txt)
;; 
(define (markdown:markdown txt)
  (initialize)
  (unescape-special-chars (block-transforms (strip-link-definitions (protect (cleanup txt))))))

; initialize

;; @syntax (initialize)
;; 
(define (initialize)
  (set '*escape-chars* [text]\`*_{}[]()>#+-.![/text])     
  (set '*escape-pairs*   '(
    ([text]\\\\[/text] [text]\\[/text])
    ([text]\\`[/text]  [text]`[/text])
    ([text]\\\*[/text] [text]*[/text]) 
    ([text]\\_[/text]  [text]_[/text])
    ([text]\\\{[/text] [text]{[/text])
    ([text]\\\}[/text] [text]}[/text])
    ([text]\\\[[/text] [text][[/text])
    ([text]\\\][/text] [text]][/text])
    ([text]\\\([/text] [text]([/text])
    ([text]\\\)[/text] [text])[/text])
    ([text]\\>[/text]  [text]>[/text])
    ([text]\\\#[/text] [text]#[/text])
    ([text]\\\+[/text] [text]+[/text])
    ([text]\\\-[/text] [text]-[/text])
    ([text]\\\.[/text] [text].[/text])
    ([text]\\![/text]  [text]![/text])
    ))
  (set '*hashed-html-blocks* '())
  (build-escape-table)
  (set '*list-level* 0))

;; @syntax (block-transforms txt)
;; 
(define (block-transforms txt)
   (form-paragraphs 
    (protect 
     (block-quotes 
      (code-blocks 
       (lists 
        (horizontal-rules 
         (headers txt))))))))

;; @syntax (span-transforms txt)
;; 
(define (span-transforms txt)
  (line-breaks 
   (emphasis 
    (amps-and-angles 
     (auto-links 
      (anchors 
       (images 
        (escape-special-chars 
         (escape-special-chars-within-tag-attributes 
          (code-spans txt))))))))))

;; @syntax (hash s)
;; 
(define (hash s)
  (base64-enc (uuid)))

;; @syntax (build-escape-table)
;; 
(define (build-escape-table)
  (set '*escape-table* '())
  (dolist (c (explode *escape-chars*))
    (push (list c (hash c)) *escape-table*)))

;; @syntax (tokenize-html xhtml)
;; 
(define (tokenize-html xhtml)
; return list of tag/text portions of xhtml text
  (letn (
       (tag-match [text]((?s:<!(-- .*? -- \s*)+>)|
(?s:<\?.*?\?>)|
(?:<[a-z/!$](?:[^<>]|
(?:<[a-z/!$](?:[^<>]|
(?:<[a-z/!$](?:[^<>]|
(?:<[a-z/!$](?:[^<>]|
(?:<[a-z/!$](?:[^<>]|
(?:<[a-z/!$](?:[^<>])*>))*>))*>))*>))*>))*>))[/text]) ; yeah, well...
      (str xhtml)
      (len (length str))
      (pos 0)
      (tokens '())
      )
 (while (set 'tag-start (find tag-match str 8))
    (if (< pos tag-start)
       (push (list text (slice str pos (- tag-start pos))) tokens -1))
    (push (list tag $0) tokens -1)
    (set 'str (slice str (+ tag-start (length $0))))
    (set 'pos 0))
 ; leftovers
  (if (< pos len)
     (push (list (quote text) (slice str pos (- len pos))) tokens -1))
  tokens)
)

;; @syntax (escape-special-chars-within-tag-attributes txt)
;; 
(define (escape-special-chars-within-tag-attributes txt)
  (let ((temp (tokenize-html txt))
        (new-text {})
       )
    (dolist (pair temp)
         (if (= (first pair) 'tag)
            ; 'tag
            (begin
              (set 'new-text (replace {\\} (last pair) (lookup {\\} *escape-table*) 0))
              (replace [text](?<=.)</?code>(?=.)[/text] new-text (lookup {`} *escape-table*) 0)
              (replace {\*} new-text (lookup {*} *escape-table*) 0)
              (replace {_} new-text (lookup {_} *escape-table*) 0)
            )
            ; 'text
            (set 'new-text  (last pair))
         )
       (setf (temp $idx) (list (first pair) new-text)))
  (join (map last temp)) ; return as text
  )
)

;; @syntax (escape-special-chars txt)
;; 
(define (escape-special-chars txt )
 ; replaces characters in tags and text tokens
  (let ((temp (tokenize-html txt))
        (new-text {})
       )
    (dolist (pair temp)
       (if (= (first pair) 'tag)
          ; 'tag
          (begin
            (set 'new-text (replace {\\} (last pair) (lookup {\\} *escape-table*) 0))
            (replace [text](?<=.)</?code>(?=.)[/text] new-text (lookup {`} *escape-table*) 0)
            (replace {\*} new-text (lookup {*} *escape-table*) 0)
            (replace {_} new-text (lookup {_} *escape-table*) 0)
            )
          ; 'text
          (begin
            (set 'new-text (encode-backslash-escapes (last pair)))))
       (setf (temp $idx) (list (first pair) new-text)))
  (join (map last temp)) ; return as text
  )
)

;; @syntax (encode-backslash-escapes t)
;; 
(define (encode-backslash-escapes t)
   (dolist (pair *escape-pairs*)
      (replace (first pair) t (lookup (last pair) *escape-table*) 14))
 t)

;; @syntax (encode-code s)
;; 
(define (encode-code s)
 ; encode/escape certain characters inside Markdown code runs
  (replace {&}  s   "&amp;" 0)
  (replace {<}  s   "&lt;" 0)
  (replace {>}  s   "&gt;" 0)
  (replace {\*} s   (lookup {*} *escape-table*) 0)
  (replace {_}  s   (lookup {_} *escape-table*) 0)
  (replace "{"  s   (lookup "{" *escape-table*) 0)
  (replace {\[} s   (lookup {[} *escape-table*) 0)
  (replace {\]} s   (lookup {]} *escape-table*) 0)
  (replace {\\} s   (lookup {\\} *escape-table*) 0)
  s)

;; @syntax (code-spans s)
;; 
(define (code-spans s)
  (replace  
    {(?<!\\)(`+)(.+?)(?<!`)\1(?!`)} 
    s 
    (string {<code>} (encode-code (trim $2)) {</code>}) 
    2
    )
  s)

;; @syntax (encode-alt s)
;; 
(define (encode-alt s)
  (replace {&} s "&amp;" 0)
  (replace {"} s "&quot;" 0)
  s)

;; @syntax (images txt)
;; 
(define (images txt)
 (let ((alt-text {})
       (url {} )
       (title {})
       (ref-regex {(!\[(.*?)\][ ]?(?:\n[ ]*)?\[(.*?)\])})
       (inline-regex {(!\[(.*?)\]\([ \t]*<?(\S+?)>?[ \t]*((['"])(.*?)\5[ \t]*)?\))})
       (whole-match {})
       (result {})
       (id-ref {})
       (url {})
       )
  ;  reference links ![alt text][id]
  (replace 
    ref-regex 
    txt 
    (begin
       (set 'whole-match $1 'alt-text $2 'id-ref $3)       
       (if alt-text
             (replace {"} alt-text {&quot;} 0))
       (if (empty? id-ref)
            (set 'id-ref (lower-case alt-text)))
       (if (lookup id-ref *link-database*)
           (set 'url (first (lookup id-ref *link-database*)))
           (set 'url nil))
       (if url
           (begin 
              (replace {\*} url (lookup {*} *escape-table*) 0)
              (replace {_}  url (lookup {_} *escape-table*) 0) 
            ))             
       (if (last (lookup id-ref *link-database*))
            ; title
           (begin
             (set 'title (last (lookup id-ref *link-database*)))
             (replace {"}  title {&quot;} 0)
             (replace {\*} title (lookup {*} *escape-table*) 0)
             (replace {_}  title (lookup {_} *escape-table*) 0))
           ; no title
           (set 'title {})
           )       
       (if url
        (set 'result (string 
          {<img src="} 
          (trim url) 
          {" alt="} 
          alt-text {" }
          (if (not (empty? title))
               (string { title="} title {"}) {})
          { />}))
        (set 'result whole-match))
     )
     0
   )
   ; inline image refs:  ![alt text](url "optional title")
    (replace 
      inline-regex 
      txt 
      (begin
        (set 'whole-match $1)
        (set 'alt-text $2)
        (set 'url $3)
        (set 'title $6)
        (if alt-text
             (replace {"} alt-text {&quot;} 0)
             (set 'alt-text {}))          
        (if  title 
             (begin 
               (replace {"}  title {&quot;} 0)
               (replace {\*} title (lookup {*} *escape-table*) 0)
               (replace {_}  title (lookup {_} *escape-table*) 0))
             (set 'title {}))           
        (replace {\*} url (lookup {*} *escape-table*) 0)
        (replace {_} url (lookup {_} *escape-table*) 0)
        (string 
           {<img src="} 
           (trim url) 
           {" alt="} 
           alt-text {" }
           (if title (string {title="} title {"}) {}) { />})
        )
        0
     )
    ; empty ones are possible
    (set '$1 {})
    (replace {!\[(.*?)\]\([ \t]*\)} 
     txt 
     (string {<img src="" alt="} $1 {" title="" />})
      0
     ) 
     
   )
 txt)

;; @syntax (make-anchor link-text id-ref)
;; 
(define (make-anchor link-text id-ref )
; Link defs are in the form: ^[id]: url "optional title"
; stored in link db list  as (id (url title))
; params are text to be linked and the id of the link in the db
; eg bar 1 for [bar][1]
   (let (
        (title {})
        (id id-ref)
        (url nil)
        )
   (if link-text
       (begin
          (replace {"} link-text {&quot;} 0)
          (replace {\n} link-text { } 0)
          (replace {[ ]?\n} link-text { } 0)
          ))   
    (if (null? id ) (set 'id  (lower-case link-text)))
    (if (not (nil? (lookup id *link-database*)))
       (begin
         (set 'url (first (lookup id  *link-database*)))
         (replace {\*} url (lookup {*} *escape-table*) 0)
         (replace {_}  url (lookup {_} *escape-table*) 0)
         (if (set 'title (last (lookup id  *link-database*)))
           (begin 
                 (replace {"}  title {&quot;} 0)
                 (replace {\*} title (lookup {*} *escape-table*) 0)
                 (replace {_}  title (lookup {_} *escape-table*) 0))
           (set 'title {})))
       (set 'url nil))
   (if url
    (string {<a href="} 
            (trim url) 
            {"}
            (if (not (= title {}))
                (string { title="} (trim title) {"}) {})
            {>} link-text {</a>})
    (string {[} link-text {][} id-ref {]}))
   )
)

;; @syntax (anchors txt)
;; 
(define (anchors txt)
  (letn ((nested-brackets {(?>[^\[\]]+)*})
         (ref-link-regex (string {(\[(} nested-brackets {)\][ ]?(?:\n[ ]*)?\[(.*?)\])}))
         (inline-regex {(\[(.*?)\]\([ ]*<?(.*?\)?)>?[ ]*((['"])(.*?)\5[ \t]*)?\))})
         (link-text {})
         (url {})
         (title {})
        )         
  ; reference-style links: [link text] [id]
  (set '$1 {} '$2 {} '$3 {} '$4 {} '$5 {} '$6 {})    ; i still don't think I should have to do this...
  (replace ref-link-regex txt (make-anchor $2 $3) 8) ; $2 is link text, $3 is id
  ; inline links: [link text](url "optional title")
  (set '$1 {} '$2 {} '$3 {} '$4 {} '$5 {} '$6 {})
  (replace 
     inline-regex 
     txt 
    (begin
      (set 'link-text $2)
      (set 'url $3)
      (set 'title $6)
      (if link-text (replace {"} link-text {&quot;} 0))          
      (if title 
           (begin 
             (replace {"}  title {&quot;} 0)
             (replace {\*} title (lookup {*} *escape-table*) 0)
             (replace {_}  title  (lookup {_} *escape-table*) 0))
           (set 'title {}))           
      (replace {\*} url (lookup {*} *escape-table*) 0)
      (replace {_}  url (lookup {_} *escape-table*) 0)
      (replace {^<(.*)>$} url $1 0)
      (string 
         {<a href="} 
         (trim url)
         {"}
         (if (not (= title {}))
                 (string { title="} (trim title) {"}) 
                 {})
         {>} link-text {</a>}
         ))
     8
   ) ; replace
 )
 txt)

;; @syntax (auto-links txt)
;; 
(define (auto-links txt)
 (replace 
    [text]<((https?|ftp):[^'">\s]+)>[/text] 
    txt 
    (string {<a href="} $1 {">} $1 {</a>})  
    0
 )
  ; to-do: email ...
  txt)

;; @syntax (amps-and-angles txt)
;; 
(define (amps-and-angles txt)
; Smart processing for ampersands and angle brackets
  (replace 
    [text]&(?!\#?[xX]?(?:[0-9a-fA-F]+|\w+);)[/text]
    txt
    {&amp;}
    10
  )
  (replace 
    [text]<(?![a-z/?\$!])[/text]
    txt
    {&lt;}
    10
  )
  txt)

;; @syntax (emphasis txt)
;; 
(define (emphasis txt)
  ; italics/bold: strong first
  (replace 
    [text] (\*\*|__) (?=\S) (.+?[*_]*) (?<=\S) \1 [/text]
    txt
    (string {<strong>} $2 {</strong>})
    8   
  )
  (replace 
    [text] (\*|_) (?=\S) (.+?) (?<=\S) \1 [/text]
    txt
    (string {<em>} $2 {</em>})
    8  
  )
  txt)

;; @syntax (line-breaks txt)
;; 
(define (line-breaks txt)
  ; handles line break markers
  (replace " {2,}\n" txt " <br/>\n" 0)
  txt)

;; @syntax (hex-str-to-unicode-char strng)
;; 
(define (hex-str-to-unicode-char strng)
   ; given a five character string, assume it's "U" + 4 hex chars and convert
   ; return the character...
   (char (int (string "0x" (1 strng)) 0 16)))

;; @syntax (ustring s)
;; 
(define (ustring s)
  (replace "U[0-9a-f]{4,}" s (hex-str-to-unicode-char $0) 1))

;; @syntax (cleanup txt)
;; 
(define (cleanup txt)
  ; cleanup the text by normalizing some possible variations
  (replace "\r\n|\r" txt "\n" 0)      ; standardize line ends
  (push "\n\n" txt -1)                ; end with two returns
  (set 'txt (detab txt))              ; convert tabs to spaces
  
  ; convert inline Unicode:
  (set 'txt (ustring txt))
  (replace "\n[ \t]+\n" txt "\n\n" 0) ; lines with only spaces and tabs
  txt)

;; @syntax (protect txt)
;; 
(define (protect txt)
 ; protect or "hash html blocks"
 (let ((nested-block-regex  [text](^<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b(.*\n)*?</\2>[ \t]*(?=\n+|\Z))[/text])
       (liberal-tag-regex [text](^<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math)\b(.*\n)*?.*</\2>[ \t]*(?=\n+|\Z))[/text])
       (hr-regex  [text](?:(?<=\n\n)|\A\n?)([ ]{0,3}<(hr)\b([^<>])*?/?>[ \t]*(?=\n{2,}|\Z))[/text])
       (html-comment-regex [text](?:(?<=\n\n)|\A\n?)([ ]{0,3}(?s:<!(--.*?--\s*)+>)[ \t]*(?=\n{2,}|\Z))[/text])
      )
   (dolist (rgx (list nested-block-regex liberal-tag-regex hr-regex html-comment-regex))
     (replace 
        rgx 
        txt
        (begin
          (set 'key (hash $1))
          (push (list key $1 ) *hashed-html-blocks* -1)
          (string "\n\n" key "\n\n"))
        2)
    )
  )
 txt)

;; @syntax (unescape-special-chars t)
;; 
(define (unescape-special-chars t)
 ; Swap back in all the special characters we've hidden.
  (dolist (pair *escape-table*)
    (replace (last pair) t (first pair) 10)
    )
  t)

;; @syntax (strip-link-definitions txt)
;; 
(define (strip-link-definitions txt)
 ; strip link definitions from the text and store them
 ; Link defs are in the form: ^[id]: url "optional title"
 ; stored in link db list  as (id (url title))
  (let ((link-db '())
        (url {})
        (id {})
        (title {})
       )
  (replace 
    [text]^[ ]{0,3}\[(.+)\]:[ \t]*\n?[ \t]*<?(\S+?)>?[ \t]*\n?[ \t]*(?:(?<=\s)["(](.+?)[")][ \t]*)?(?:\n+|\Z)[/text]
    txt 
    (begin 
      (set 'id (lower-case $1) 'url (amps-and-angles $2) 'title $3)
      (if title (replace {"} title {&quot;} 0))
      (push (list id (list url title)) link-db)
      (set '$3 {}) ; necessary?
      (string {}) ; remove from text
      ) 
    10)
  (set '*link-database* link-db)
  txt
  )
)

;; @syntax (horizontal-rules txt)
;; 
(define (horizontal-rules txt)
 (replace 
   [text]^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$[/text]
    txt
    "\n<hr />"
    14)  
  (replace 
    [text]^[ ]{0,2}([ ]? -[ ]?){3,}[ \t]*$[/text]
    txt
    "\n<hr />"
    14)  
  (replace 
    [text]^[ ]{0,2}([ ]? _[ ]?){3,}[ \t]*$[/text]
    txt
    "\n<hr />"
    14)
 txt)

;; @syntax (headers txt)
;; 
(define (headers txt)
  ; setext headers
 (let ((level 1)
      )
 (replace 
   [text]^(.+)[ \t]*\n=+[ \t]*\n+[/text]
   txt 
   (string "<h1>" (span-transforms $1) "</h1>\n\n")
   2)  
  
 (replace 
   [text]^(.+)[ \t]*\n-+[ \t]*\n+[/text]
   txt 
   (string "<h2>" (span-transforms $1) "</h2>\n\n")
   2) 
   ; atx headers
 (replace 
   [text]^(\#{1,6})\s*(.+?)[ ]*\#*(\n+)[/text]
   txt 
   (begin
    (set 'level (length $1))
    (string "<h" level ">" (span-transforms $2) "</h" level ">\n\n")
    )
   2)
 )
 txt)

;; @syntax (lists txt)
;; 
(define (lists txt)
 (letn ((marker-ul {[*+-]})
        (marker-ol {\d+[.]})
        (marker-any (string {(?:} marker-ul {|} marker-ol {)}))
        (whole-list-regex (string [text](([ ]{0,3}([/text] marker-any [text])[ \t]+)(?s:.+?)(\z|\n{2,}(?=\S)(?![ \t]*[/text] marker-any [text][ \t]+)))[/text]))
        (my-list {})
        (list-type {})
        (my-result {})
        )
   (replace 
      (if (> *list-level* 0)
          (string {^} whole-list-regex) 
          (string {(?:(?<=\n\n)|\A\n?)} whole-list-regex))
      txt
      (begin
         (set 'my-list $1)
         (if (find $3 marker-ul) 
            (set 'list-type "ul" 'marker-type marker-ul) 
            (set 'list-type "ol" 'marker-type marker-ol))
         (replace [text]\n{2,}[/text] my-list "\n\n\n" 0)
         (set 'my-result (process-list-items my-list marker-any))
         (replace {\s+$} my-result {} 0)
         (string {<} list-type {>} "\n" my-result "\n" {</} list-type {>} "\n"))
      10 ; must be multiline
      )   
 )
 txt
)

;; @syntax (process-list-items list-text marker-any)
;; 
(define (process-list-items list-text marker-any)    
  (let ((list-regex (string [text](\n)?(^[ \t]*)([/text] marker-any [text])[ \t]+((?s:.+?)(\n{1,2}))(?=\n*(\z|\2([/text] marker-any [text])[ \t]+))[/text]))
        (item {})
        (leading-line {})
        (leading-space {})
        (result {})
       )
  (inc *list-level*)
  (replace [text]\n{2,}\z[/text] list-text "\n" 0)
  (set '$1 {} '$2 {} '$3 {} '$4 {} '$5 {})
  (replace 
    list-regex
    list-text
    (begin
      (set 'item $4)
      (set 'leading-line $1)
      (set 'leading-space $2)
      (if (or (not (empty? leading-line)) (ends-with item "\n{2,}" 0))
          (set 'item (block-transforms (outdent item)))
        ; recurse for sub lists
        (begin 
           (set 'item (lists (outdent item))) 
           (set 'item (span-transforms (trim item "\n")))
           ))
    (string {<li>} item {</li>} "\n")
    )
  10)
 (dec *list-level*)
 list-text
 )
)

;; @syntax (code-blocks txt)
;; 
(define (code-blocks txt)
 (let ((code-block {})
       (token-list '())
      )
  (replace 
    [text](?:\n\n|\A)((?:(?:[ ]{4}|\t).*\n+)+)((?=^[ ]{0,3}\S)|\Z)[/text]
    txt 
    (begin 
      (set 'code-block $1)
      ; format if it's newlisp and the Nestor module is loaded
      (if (and  (starts-with code-block "    ;newlisp\n") (context? Nestor))
          ; format newlisp
          (begin 
             ; remove flag
            (replace "[ ]{4};newlisp\n" code-block {} 0)
            (set 'code-block (protect (Nestor:nlx-to-html (Nestor:read (trim (detab (outdent code-block)) "\n"))))))
            
          ; don't format 
          (begin
            ; trim leading and trailing newlines
            (set 'code-block (trim (detab (encode-code (outdent code-block))) "\n"))
            (set '$1 {})
            (set 'code-block (string "\n\n<pre><code>" code-block "\n</code></pre>\n\n")))))
    10
    )
 )
 txt)

;; @syntax (block-quotes txt)
;; 
(define (block-quotes txt)
  (let ((block-quote {})
       )
  (replace 
    [text]((^[ \t]*>[ \t]?.+\n(.+\n)*\n*)+)[/text]
    txt 
    (begin 
      (set 'block-quote $1)
      (replace {^[ ]*>[ ]?} block-quote {} 2)
      (replace {^[ ]+$} block-quote {} 2)
      (set 'block-quote (block-transforms block-quote)) ; recurse     
      ; remove leading spaces
      (replace 
          {(\s*<pre>.+?</pre>)} 
          block-quote 
          (trim $1)
          2)
      (string "<blockquote>\n" block-quote "\n</blockquote>\n\n"))
    2
    )
  )
  txt)

;; @syntax (outdent s)
;; 
(define (outdent s)
  (replace [text]^(\t|[ ]{1,4})[/text] s {} 2)
   s)

;; @syntax (detab s)
;; 
(define (detab s)
  (replace [text](.*?)\t[/text] 
    s   
    (string $1 (dup { } (- 4 (% (length $1) 4))))
    2)
 )

;; @syntax (form-paragraphs txt)
;; 
(define (form-paragraphs txt)
  (let ((grafs '())
        (original nil) 
       )
    (set 'txt   (trim txt "\n"))            ; strip blank lines before and after
    (set 'grafs (parse txt "\n{2,}" 0))     ; split    
    (dolist (p grafs)
      (if (set 'original (lookup p *hashed-html-blocks*))
        ; html blocks
        (setf (grafs $idx) original)
        ; wrap <p> tags round everything else
        (setf (grafs $idx) (string {<p>} (replace {^[ ]*} (span-transforms p) {} (+ 4 8 16)) {</p>}))
        ))
    (join grafs "\n\n")
  )
)

; the end

; formatted by Nestor on Sun Feb 1 18:33:47 2009