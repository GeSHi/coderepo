//vertexshader
varying vec3 normal, lightDir, eyeVec;
void main()
{
    normal = gl_NormalMatrix * gl_Normal;
    vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
    lightDir = vec3(gl_LightSource[0].position.xyz - vVertex);
    eyeVec = -vVertex;
    gl_Position = ftransform();
}

//fragment shader
varying vec3 normal, lightDir, eyeVec;
void main (void)
{
    vec4 final_color =
        (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + (gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
    vec3 N = normalize(normal);
    vec3 L = normalize(lightDir);
    float lambertTerm = dot(N,L);
    if(lambertTerm > 0.0)
    {
        final_color += gl_LightSource[0].diffuse *
        gl_FrontMaterial.diffuse * lambertTerm;
        vec3 E = normalize(eyeVec);
        vec3 R = reflect(-L, N);
        float specular = pow( madot(R, E), 0.0), gl_FrontMaterial.shininess);
        final_color += gl_LightSource[0].specular * gl_FrontMaterial.specular * specular;
    }
    gl_FragColor = final_color;
}